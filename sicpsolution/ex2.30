(define (square-tree x)
  (define nil '())
  (if (null? x)
       nil
	  (cons (if (not (pair? (car x)))
	            (square (car x))
				(square-tree (car x)))
			(if (not (pair? (cdr x)))
			    (square (cdr x))
				(square-tree (cdr x))))))
(define (square-tree x)
  (define nil '())
  (cond ((null? x) nil)
        ((not (pair? car x)) (square (car x)))
		(else (cons (square-tree (car x)) (square (cdr x))))))
	  
(define (square-tree x)
  (define nil '())
  (map (lambda (temp)
         (if (pair? temp)
		     (square-tree temp)
			 (square temp)))
        tree))
  