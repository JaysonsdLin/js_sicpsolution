(define (fold-left op initial sequence)
  (define (iter result rest)
    (if (null? rest)
	    rest
		(iter (op result (car rest))
		      (cdr rest))))
  (iter initial sequence))
(define (fold-right op initial sequence)
  (if (null? sequence)
      initial
	  ((lambda (x y) (op (car y)
	                     (fold-right op x (cdr y))))
				initial
				sequence)))
结合律

	                     
      