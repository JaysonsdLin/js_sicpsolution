(variable? e)
(same-variable? v1 v2)
(sum? e)
(aggend e)
(product? e)
(multiplier e)
(multiplicand e)
(make-product m1 m2)
(exponention? e)
(base e)
(exponent e)
(make-exponentiation b1 b2)
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
		  (if (same-variable? exp var) 1 0))
		((sum? exp)
		 (make-sum (deriv (addend exp) var)
		           (deriv (augend exp) var)))
		((product? exp)
		 (make-sum
		   (make-product (multiplier exp)
		                 (deriv (multiplicand exp) var))
		   (make-product (deriv (multiplier exp) var)
		                 (multiplicand exp))))
		((exponentiation? exp)
		 (make-product (make-product (exponent exp)
		                             (deriv (base exp) var))
					   (make-exponentiation (base exp)
					                        (- (exponent exp) 1))))                 
		(else 
		  error "unknown expression type -- DERIV" exp)))
(define (variable? x) (symbol? x))
(define (same-variable v1 v2)
  (and (variable? v1) (variable? 2) (eq? v1 v2)))
(define (=number? exp num)
  (and (number? exp) (= exp num)))
(define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))		
(define (make-product m1 m2)
  (cond ((or (=number? m1 0) (=number? m2 0)) 0)
        ((=number? m1 1) m2)
		((=number? m2 1) m1)
		((and (number? m1) (number? m2)) (* m1 m2))
		(else (list '* m1 m2))))
(define (sum? x)
  (and (pair? x) (eq? (car x) '+)))
(define (addend s) (cadr s))
(define (augend s) (caddr s))
(define (product? x)
  (and (pair? x) (eq? (car x) 'x)))
(define (multiplier p) (cadr p))
(define (multiplicand p) (caddr p))
(define (exponentiation? x) 
  (and (pair? x) (eq? (car x) '**)))
(define (base s) (cadr s))
(define (exponent s) (caddr s))
(define (make-exponentiation b1 b2)
  (cond ((=number? b2 0) 1)
        ((=number? b2 1) b1)
		(else (list '** b1 b2))))